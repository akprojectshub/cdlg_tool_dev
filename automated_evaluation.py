from controllers.drift_info_collection import DriftInfo, extract_change_moments_to_list
from controllers.drift_info_collection import NoiseInfo
from controllers.drift_info_collection import LogDriftInfo
import datetime
from datetime import timedelta



def drift_time_checker (tool_d,user_d,delta): # I assumed delta is in seconds
    # Path to a gold standard log, path to user generated log
    tool_drift_t = tool_d["drift_time"]
    user_drift_t =  user_d["drift_time"]
    # First condition on the drift seasonality number
    if (len(tool_drift_t) != len(user_drift_t)):
        #print("Not the same number of seasonal changes considered in the log generated by the tool and the log generated by the user")
        return False
    else:
        for i in range(0,len(tool_drift_t)):
            #print(abs(timedelta.total_seconds(tool_drift_t[i] - user_drift_t[i])))
            if (abs(timedelta.total_seconds(tool_drift_t[i] - user_drift_t[i])) > delta):
                #print("Drift time dicrepancy drift time " + str(i) + " doesn't match the golden standard")
                return False
            else:
                #print("Drift time match")
                return True


def check_drift_type(tool_d,user_d):
    tool_drift_ty = tool_d["drift_type"]
    user_drift_ty = user_d["drift_type"]

    if (tool_drift_ty == user_drift_ty):
        return True
    else :
        return False








# Load drift instance
DI_tool = LogDriftInfo().extract_drift_and_noise_info("C:/Users/ziedk/OneDrive/Bureau/New folder/cdlg_tool_dev/data/generated_collections/Dummies")
DI_user = LogDriftInfo().extract_drift_and_noise_info("C:/Users/ziedk/OneDrive/Bureau/New folder/cdlg_tool_dev/data/generated_collections/Dummies")



drifts_tool = DI_tool.drifts
drifts_user = DI_user.drifts


drifts_tool = [{'log_id': 'log_1_1679828389.xes', 'drift_id': 1, 'process_perspective': 'control-flow', 'drift_type': 'incremental', 'drift_time': [datetime.datetime(2021, 9, 7, 21, 54, 11, 170097), datetime.datetime(2024, 2, 3, 20, 49, 21, 490329)], 'activities_added': ['Random activity 1', 'Random activity 2', 'Random activity 3'], 'activities_deleted': ['k'], 'activities_moved': '[]', 'process_trees': ["->( *( ->( ->( *( 'a', 'n' ), X( 'o', 'p' ) ), X( 'f', +( 'h', +( 'j', 'k' ) ) ) ), X( 'b', 'i' ) ), ->( ->( 'c', 'e' ), ->( ->( ->( 'd', 'm' ), 'l' ), 'g' ) ) )", "->( *( ->( ->( *( 'a', 'n' ), X( 'o', 'p' ) ), X( 'f', +( 'h', +( 'j', 'Random activity 1' ) ) ) ), X( 'b', 'i' ) ), ->( ->( 'c', 'e' ), ->( ->( ->( 'd', 'm' ), 'l' ), 'g' ) ) )", "->( *( ->( ->( *( 'a', 'n', 'Random activity 3' ), X( 'o', 'p' ) ), X( 'f', +( 'h', +( 'j', 'Random activity 1' ) ) ) ), X( 'b', 'i' ) ), ->( ->( 'c', 'e' ), ->( ->( ->( 'd', 'm' ), 'l' ), 'g' ), 'Random activity 2' ) )"]}, {'log_id': 'log_2_1679828393.xes', 'drift_id': 1, 'process_perspective': 'control-flow', 'drift_type': 'incremental', 'drift_time': [datetime.datetime(2022, 3, 28, 9, 22, 0, 825438), datetime.datetime(2022, 6, 5, 21, 35, 44, 894547), datetime.datetime(2022, 8, 7, 23, 19, 7, 615346), datetime.datetime(2022, 10, 15, 21, 38, 35, 362569), datetime.datetime(2022, 12, 23, 19, 7, 38, 787909)], 'activities_added': ['Random activity 1', 'Random activity 1'], 'activities_deleted': ['Random activity 1', 'c', 'a'], 'activities_moved': '[]', 'process_trees': ["->( 'a', +( 'b', ->( 'c', ->( *( 'd', 'e' ), X( 'f', 'g' ) ) ) ) )", "->( 'a', +( 'b', ->( 'c', ->( *( 'd', 'e', 'Random activity 1' ), X( 'f', 'g' ) ) ) ) )", "->( 'a', +( 'b', ->( 'c', ->( *( 'd', 'e', *tau* ), X( 'f', 'g' ) ) ) ) )", "->( 'a', +( 'b', ->( *tau*, ->( *( 'd', 'e', *tau* ), X( 'f', 'g' ) ) ) ) )", "->( 'a', +( 'b', ->( *tau*, ->( *( 'd', 'e', *tau* ), X( 'f', 'g' ) ) ), 'Random activity 1' ) )", "->( *tau*, +( 'b', ->( *tau*, ->( *( 'd', 'e', *tau* ), X( 'f', 'g' ) ) ), 'Random activity 1' ) )"]}]
drifts_user = [{'log_id': 'log_1_1679828389.xes', 'drift_id': 1, 'process_perspective': 'control-flow', 'drift_type': 'incremental', 'drift_time': [datetime.datetime(2021, 9, 7, 21, 54, 11, 170097), datetime.datetime(2024, 2, 3, 20, 49, 21, 490329)], 'activities_added': ['Random activity 1', 'Random activity 2', 'Random activity 3'], 'activities_deleted': ['k'], 'activities_moved': '[]', 'process_trees': ["->( *( ->( ->( *( 'a', 'n' ), X( 'o', 'p' ) ), X( 'f', +( 'h', +( 'j', 'k' ) ) ) ), X( 'b', 'i' ) ), ->( ->( 'c', 'e' ), ->( ->( ->( 'd', 'm' ), 'l' ), 'g' ) ) )", "->( *( ->( ->( *( 'a', 'n' ), X( 'o', 'p' ) ), X( 'f', +( 'h', +( 'j', 'Random activity 1' ) ) ) ), X( 'b', 'i' ) ), ->( ->( 'c', 'e' ), ->( ->( ->( 'd', 'm' ), 'l' ), 'g' ) ) )", "->( *( ->( ->( *( 'a', 'n', 'Random activity 3' ), X( 'o', 'p' ) ), X( 'f', +( 'h', +( 'j', 'Random activity 1' ) ) ) ), X( 'b', 'i' ) ), ->( ->( 'c', 'e' ), ->( ->( ->( 'd', 'm' ), 'l' ), 'g' ), 'Random activity 2' ) )"]}, {'log_id': 'log_2_1679828393.xes', 'drift_id': 1, 'process_perspective': 'control-flow', 'drift_type': 'incremental', 'drift_time': [datetime.datetime(2022, 3, 28, 9, 22, 0, 825438), datetime.datetime(2022, 6, 5, 21, 35, 44, 894547), datetime.datetime(2022, 8, 7, 23, 19, 7, 615346), datetime.datetime(2022, 10, 15, 21, 38, 35, 362569), datetime.datetime(2022, 12, 23, 19, 7, 38, 787909)], 'activities_added': ['Random activity 1', 'Random activity 1'], 'activities_deleted': ['Random activity 1', 'c', 'a'], 'activities_moved': '[]', 'process_trees': ["->( 'a', +( 'b', ->( 'c', ->( *( 'd', 'e' ), X( 'f', 'g' ) ) ) ) )", "->( 'a', +( 'b', ->( 'c', ->( *( 'd', 'e', 'Random activity 1' ), X( 'f', 'g' ) ) ) ) )", "->( 'a', +( 'b', ->( 'c', ->( *( 'd', 'e', *tau* ), X( 'f', 'g' ) ) ) ) )", "->( 'a', +( 'b', ->( *tau*, ->( *( 'd', 'e', *tau* ), X( 'f', 'g' ) ) ) ) )", "->( 'a', +( 'b', ->( *tau*, ->( *( 'd', 'e', *tau* ), X( 'f', 'g' ) ) ), 'Random activity 1' ) )", "->( *tau*, +( 'b', ->( *tau*, ->( *( 'd', 'e', *tau* ), X( 'f', 'g' ) ) ), 'Random activity 1' ) )"]}]



#in user but not in tool
delta = 1
detected_drifts = 0
metrics = {}
print(drifts_tool)

for i in drifts_tool:
    index_id = [k  for k in [j  if i["log_id"] == drifts_user[j]["log_id"] else -1 for j in range(0,len(drifts_user))] if k!=-1] #finds the position of the drift i in the tool drift instance if not found returns -1
    if (len(index_id)!=0): #This is the case where no match has been found (log_id in the tool generated instances but not in the user one"
        index_id = index_id[0]
        if(check_drift_type(i,drifts_user[index_id]) and drift_time_checker(i,drifts_user[index_id],delta)==True ):
            detected_drifts +=1
metrics["precision"] = detected_drifts/len(drifts_user)
metrics["recall"] = detected_drifts/len(drifts_tool)





def Precision (tool_class, user_class):
    #Precision = TruePositives / (TruePositives + FalsePositives)
    act_aff_tool = list()
    act_aff_tool.extend(tool_class.activities_added)
    act_aff_tool.extend(tool_class.activities_deleted)
    act_aff_tool.extend(tool_class.activities_moved)
    act_aff_tool = set(act_aff_tool)

    act_aff_user = list()
    act_aff_user.extend(user_class.activities_added)
    act_aff_user.extend(user_class.activities_deleted)
    act_aff_user.extend(user_class.activities_moved)
    act_aff_user = set(act_aff_user)

    TP = len(act_aff_tool.intersection(act_aff_user))
    FP = sum([1 for i in act_aff_user if i not in act_aff_tool])
    return TP/ (FP+TP)

def Recall (tool_class, user_class):
    # recall = TruePositives / (TruePositives + FalseNEgatives)
    act_aff_tool = list()
    act_aff_tool.extend(tool_class.activities_added)
    act_aff_tool.extend(tool_class.activities_deleted)
    act_aff_tool.extend(tool_class.activities_moved)
    act_aff_tool = set(act_aff_tool)

    act_aff_user = list()
    act_aff_user.extend(user_class.activities_added)
    act_aff_user.extend(user_class.activities_deleted)
    act_aff_user.extend(user_class.activities_moved)
    act_aff_user = set(act_aff_user)

    TP = len(act_aff_tool.intersection(act_aff_user))
    FN = sum([1 for i in act_aff_tool if i not in act_aff_user])
    return TP / (TP + FN)




